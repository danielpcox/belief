/* Cards */

:root {
  --card-tools-hover-persistence-duration: 35s;
  --card-control-base-opacity: 0.2;
}

@mixin style-for-dragging-drag-handle {
}



.card {
  --card-vertical-padding: var(--spacing-base);
  --card-horizontal-padding: calc(1.5 * var(--spacing-base));

  background-color: var(--color-card-background-hsla);
  box-shadow: 0 0 0 0 transparent, 0 0 3px -2px var(--color-content);
  border-radius: var(--border-radius-base);
  padding: var(--card-vertical-padding) var(--card-horizontal-padding);
  width: calc(18 * var(--spacing-base));
  min-height: calc(15 * var(--spacing-base));
  transition: var(--transition-base);
  transition-property: color, background-color, opacity, box-shadow, backdrop-filter, -webkit-backdrop-filter;
  z-index: var(--z-index-card-base);
  border: 2px solid transparent;
  position: absolute;
  line-height: 1.4;
  display: flex;
  flex-direction: column;

  &:hover {
    z-index: calc(var(--z-index-card-base) + 10);
  }

  &:after {
    /* Scrolling area spacing element */
    .card:after {
      --card-scrolling-spacing-size: calc(var(--spacing-base) * -5);

      content: '';
      position: absolute;
      pointer-events: none;
      top: var(--card-scrolling-spacing-size);
      bottom: var(--card-scrolling-spacing-size);
      left: var(--card-scrolling-spacing-size);
      right: var(--card-scrolling-spacing-size);
      z-index: -20;
    }
  }

  /* Hover area spacing element */
  &:before {
    --card-hover-spacing-size: calc(var(--spacing-base) * -3);

    content: '';
    position: absolute;
    top: var(--card-hover-spacing-size);
    bottom: var(--card-hover-spacing-size);
    left: 0;
    right: 0;
    z-index: -10;
    border-radius: 20px;
  }

  &.selected {
    border-color: var(--color-intent-interaction);
  }

  .text {
    font-weight: bold;
    line-height: 1.2;
    margin: 0 calc(var(--card-horizontal-padding) * -1) auto;
    padding: 0 var(--card-horizontal-padding) var(--spacing-base);
    transition: all var(--transition-base-duration-and-timing);
    cursor: text;

    &:hover {
      color: var(--color-intent-interaction);
    }

    &:focus {
      color: var(--color-intent-interaction);
      outline: none;
    }
  }

  .prior,
  .probability {
    margin: 0;
  }


  .label {
    flex: 1 1 100%;
  }
  .ratio {
    word-spacing: 0;
    white-space: nowrap;
  }
  .ratio .n {}
  .ratio .d {}
  .ratio .d:before {
    content: ':'
  }

  .prior {
    display: flex;
    align-items: center;
    font-weight: bold;
    font-size: var(--font-size-sm);
    border-bottom: 1px solid rgba(0,0,0,.1);

    .label {
      flex: 1 1 auto;
    }

    input {
      flex: 1 1 100%;
      width: 3em;
      border: 0;
      appearance: none;
      -webkit-appearance: none;
      text-align: right;
      font-weight: inherit;

      &:invalid {
        border: 1px solid var(--color-intent-danger);
      }

      &:hover {
        color: var(--color-intent-interaction);
      }

      &:focus {
        outline: none;
        color: var(--color-intent-interaction);
      }
    }

    &:hover input {
      color: var(--color-intent-interaction);
    }

    .unit {
      flex: 0 0 auto;
    }

    .popover {
      display: none;
    }
  }

  .probability {
    text-align: right;
    display: flex;

    .value {
      margin-left: auto;
    }
  }
}

// Contextual card tools
// Drag handle, delete button, etc.
// These disappear on mouseout, for the most part.
.card {

  &:hover {
    .tools {
      opacity: 1;
      z-index: 100000;
    }
  }

  .tools {
    position: absolute;
    display: flex;
    justify-content: space-between;
    align-items: center;
    top: calc(var(--spacing-base) * -2.5);
    height: calc(var(--spacing-base) * 2);
    transition: all var(--transition-base-duration-and-timing);
    z-index: 0;
    opacity: 0;
    right: 0;
    left: 0;

    .select {
      position: relative;
      font-weight: bold;
      padding: 0;
      flex: 0 0 16px;
      top: -1px;
      opacity: var(--card-control-base-opacity);
      transition: all var(--transition-base-duration-and-timing);

      &:hover,
      &.checked {
        opacity: 1;
      }
    }

    .drag-handle {
      flex: 0 0 20%;
      border-radius: 100px;
      background-color: var(--color-content);
      height: calc(var(--spacing-base) * .5);
      cursor: grab;
      pointer-events: auto;
      opacity: var(--card-control-base-opacity);
      transition: var(--transition-base);
      -webkit-backdrop-filter: blur(calc(var(--spacing-base) * .5));
      position: relative;

      &:after {
        position: absolute;
        top: calc(var(--spacing-base) * -4);
        right: calc(var(--spacing-base) * -3);
        left: calc(var(--spacing-base) * -3);
        bottom: calc(var(--spacing-base) * -1);
        content: '';
      }

      &:hover {
        flex-basis: 25%;
      }

      &:active {
        cursor: grabbing;
        opacity: 0.5;
        transition-duration: 0;
      }
    }

    .delete {
      --thickness: calc(var(--spacing-base) * .3);
      --size: calc(var(--spacing-base) * 1.5);
      --control-size: calc(var(--spacing-base) * 2);

      flex: 0 0 var(--control-size);
      height: var(--control-size);
      color: var(--color-intent-danger);
      appearance: none;
      padding: 0;
      border: 0;
      opacity: var(--card-control-base-opacity);
      cursor: pointer;
      position: relative;
      transform: translateY(calc(var(--thickness) * -1));
      transform-origin: center center;

      &:after {
        // Create a more convenient mouse target for the button
        width: 1.3em;
        height: 1.3em;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translateY(-50%);
        content: '';
      }
      
      .label {
        position: absolute;
        pointer-events: none;
        z-index: -100;
        visibility: hidden;
      }
      
      .close-bars {
        overflow: visible;
        transition: var(--transition-base);
        transform: translateX(50%);

        .close-bar {
          position: absolute;
          top: 0;
          height: var(--thickness);
          width: var(--size);
          background-color: black;
          border-radius: var(--thickness);
          transform: translateX(-50%) rotate(45deg);
          transform-origin: center center;
          transition: inherit;

          &:first-child {
            transform:  translateX(-50%) rotate(-45deg);
          }
        }
      }

      &:hover {
        --size: calc(var(--spacing-base) * 2);

        opacity: 1;

        .close-bar {
          background-color: var(--color-intent-danger);
        }
      }
    }
  }
}
